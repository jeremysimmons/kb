public class JsonPathAttribute : Attribute
{
    public JsonPathAttribute(string jsonPath)
    {
        JsonPath = jsonPath;
    }

    public string JsonPath { get; set; }
}

public class JsonPathConverter : JsonConverter
{
    public override object ReadJson(JsonReader reader, Type objectType,
                                    object existingValue, JsonSerializer serializer)
    {
        var jo = JObject.Load(reader);
        object targetObj = Activator.CreateInstance(objectType);

        foreach (var prop in objectType.GetProperties()
                                       .Where(p => p.CanRead && p.CanWrite))
        {
            var att = prop.GetCustomAttributes(true)
                          .OfType<JsonPathAttribute>()
                          .FirstOrDefault();
            var jsonPath = (att != null ? att.JsonPath : prop.Name);
            var token = jo.SelectToken(jsonPath);
            if (token != null && token.Type != JTokenType.Null)
            {
                var value = token.ToObject(prop.PropertyType, serializer);
                prop.SetValue(targetObj, value, null);
            }
        }

        return targetObj;
    }

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        // WriteJson is not called when CanWrite returns false
    }

    public override bool CanWrite
    {
        get { return false; }
    }

    public override bool CanConvert(Type objectType)
    {
        // CanConvert is not called when [JsonConverter] attribute is used
        return false;
    }
}

[JsonConverter(typeof(JsonPathConverter))]
public class FacebookFeed
{
    public FacebookFeed()
    {
        Posts = new List<FacebookFeedPost>();
    }

    [JsonPath("name")]
    public string Name { get; set; }

    [JsonPath("fan_count")]
    public int Likes { get; set; }

    [JsonPath("feed.data")]
    public List<FacebookFeedPost> Posts { get; set; }
}

[JsonConverter(typeof(JsonPathConverter))]
public class FacebookFeedPost
{
    [JsonPath("id")]
    public string Id { get; set; }

    [JsonPath("message")]
    public string Message { get; set; }

    [JsonPath("created_time")]
    public DateTime Date { get; set; }

    [JsonPath("comments.summary.total_count")]
    public int Comments { get; set; }
}